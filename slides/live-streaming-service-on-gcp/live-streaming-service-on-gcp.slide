Live Streaming Service on Google Cloud Platform
goo.gl/gpyHgK

Browny Lin
_Gopher_ at LIVEHouse.in
@brownylin
browny.lin@livehouse.in


* About me

- ~2 years experiences on Go, following C++, Java
- Simple things should be simple, complex things should be possible
- Use [[https://github.com/browny/dotvim][vim]], share on [[https://twitter.com/brownylin][twitter]], code on [[https://github.com/browny][github]] 


* 
[[https://livehouse.in][livehouse.in]] - live streaming solution for UGC

.image images/livehousein.png 500 _


* 
[[https://straas.io][straas.io]] - makes underlying infra of livehouse.in available for ToB solution

.image images/straasio.png 500 _


* Team

Main responsibilities of backend (*5* RDs)

- *Streaming*: _C_
- *Messaging*: _Node.js_ (plan to _Go_)
- *Infrastructure*: _Go_


* Outline

- Streaming as a Service
- Live Streaming Pipeline
- Coordination and Scalability
- Summary


* Streaming as a Service


* For Live
.video videos/live-demo.mp4 video/mp4 540 _


* For VOD (video on demand)
.video videos/vod-demo.mp4 video/mp4 540 _


* Transcoder as a Service
[[https://github.com/StraaS/StraaS-stream-service][github.com/StraaS/StraaS-stream-service]]

- Programmable by API
- Check out the step by step [[https://github.com/StraaS/StraaS-stream-service/wiki/Scenario#step0][tutorial]]
- Support storage type: FTP (current); GCS, S3 in the future


* Live Streaming Pipeline


* Protocols

Live

- Input: [[https://en.wikipedia.org/wiki/Real-Time_Messaging_Protocol][RTMP]]
- Output: [[https://en.wikipedia.org/wiki/HTTP_Live_Streaming][HLS]], MP4

VOD

- Input: Video files

		Container: MP4, MOV, AVI, FLV
		Video codec: AVC(H.264)
		Audio codec: AAC, AC3, MP3, SPEEX, OPUS

- Output: HLS, MP4


* Flow (Live)

.image images/live-flow.png 550 _


* Flow (VOD)

.image images/vod-flow.png 550 _


* Coordination and Scalability


* Responsibilities (1/3)

*Arrange* suitable machine to serve corresponding stream

- Reserved for connection retry
- Basic or Premium 
- Failover mechanism


* Responsibilities (2/3)

*Balance* between cost and service availability

- How many idle machines should be kept online
- Prepare for burst load (scheduled plan)

.image images/balance.png 200 _


* Responsibilities (3/3)

*All* things hard to be categorized

- Communication with other services (ex: metrics, billing)
- Deployment
- Audition (fail gracefully)
- Monitor & Alert

.image images/notify.png 200 _


* Stack

_Google_ _Cloud_ _Platform_

- *Compute* *Engine* for transcoder computing power
- *Datastore* / *CloudSQL* for persistence
- *Storage* for static assets hosting / file storage
- *PubSub* for message queueing
- *Bigquery* for data analysis

_Inhouse_ _Service_

- Metrics / Alert service
- Billing service
- Consensus service
- Data analysis service


* Summary (1/2)

- Handle errors carefully (everything is possilbe to fail)
- Balance between *transcoding* cost and *bandwidth* cost
- Streaming is just a "must have", the key should be *the* *interaction* *it* *enables*


* Summary (2/2)

Future work

- Container engine for *finer* *granularity* *of* *resource* *consumption*
- Clearer modulization

Hiring

- Yes, we are [[https://event.livehouse.in/zh-TW/about/recruit-engineer.html#backend-engineer][hiring]]


* 
[[https://gcp.expert][gcp.expert]]

.image images/gcp-expert.png 450 _
